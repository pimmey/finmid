// This file is auto-generated by @hey-api/openapi-ts
import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  GetSmeDataResponse,
  GetTransactionsData,
  GetTransactionsResponse,
  GetUsersResponse,
  PostLoginData,
  PostLoginResponse,
} from './types.gen';

export class AuthService {
  /**
   * Log in
   * @param data The data for the request.
   * @param data.requestBody
   * @returns unknown Successful login
   * @throws ApiError
   */
  public static postLogin(
    data: PostLoginData,
  ): CancelablePromise<PostLoginResponse> {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/login',
      body: data.requestBody,
      mediaType: 'application/json',
      errors: {
        401: 'Unauthorized',
      },
    });
  }
}

export class UsersService {
  /**
   * Returns users list
   * @returns User List of users
   * @throws ApiError
   */
  public static getUsers(): CancelablePromise<GetUsersResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/users',
      errors: {
        400: 'Bad request, when the authorization is missing',
      },
    });
  }
}

export class SmeService {
  /**
   * Get info on currently logged in SME
   * @returns SME SME Data
   * @throws ApiError
   */
  public static getSmeData(): CancelablePromise<GetSmeDataResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/sme-data',
      errors: {
        401: "Bad request. This is returned when the auth doesn't get the correct authorization auth",
      },
    });
  }
}

export class TransactionsService {
  /**
   * Get a paginated or filtered list of transactions
   * @param data The data for the request.
   * @param data.userId UUID of a specific user
   * @param data.status The status of the transactions we want to filter by.
   * @param data.offset
   * @param data.limit Limits the list by a specific number. Sometimes called `perPage`
   * @returns unknown List of transactions
   * @throws ApiError
   */
  public static getTransactions(
    data: GetTransactionsData = {},
  ): CancelablePromise<GetTransactionsResponse> {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/transactions',
      query: {
        userId: data.userId,
        status: data.status,
        offset: data.offset,
        limit: data.limit,
      },
    });
  }
}
